# try:
#     numero = int(input("Ingresa un n√∫mero: "))
#     print(10 / numero)
# except ValueError:
#     print("Debes ingresar un n√∫mero.")
# except ZeroDivisionError:
#     print("No puedes dividir entre cero.")




# try:
#     numero = int(input("N√∫mero: "))
# except ValueError:
#     print("No es v√°lido.")
# else:
#     print("Todo sali√≥ bien.")
# finally:
#     print("Este bloque siempre se ejecuta.")



# try:
#     1 / 0
# except ZeroDivisionError as e:
#     print(f"Ocurri√≥ un error: {e}")



# Creamos una nueva clase que hereda de Exception
# class SaldoInsuficienteError(Exception):
#     pass

# def retirar(saldo, monto):
#     if monto > saldo:
#         raise SaldoInsuficienteError("No hay suficiente saldo para esta operaci√≥n.")
#     return saldo - monto

# # Probando la funci√≥n
# try:
#     retirar(100, 200)
# except SaldoInsuficienteError as e:
#     print(f"Error: {e}")

# # üí° Esto genera un error espec√≠fico que puedes capturar, loguear o mostrar al usuario seg√∫n el contexto.



# try:
#     resultado = 10 /0
# except ZeroDivisionError:
#     print('No se puede dividir entre cero. ')


# def retirar(saldo, monto ):
#     if monto > saldo:
#         raise ValueError('Saldo insuficiente.')
#     else:
#         print(saldo - monto)

# retirar(200,50)


# try:
#     saldo = 400
#     monto = 200

#     if monto > saldo:
#         raise ValueError('Saldo insuficiente')
#     else:
#         print( saldo - monto)
# except ValueError as e:
#     print(f'Erro: {e}')


# def transferir(dinero_disponible, monto_transferible):
#     if monto_transferible > dinero_disponible:
#         raise ValueError('No tienes suficiente dinero para transferir')
#     return dinero_disponible - monto_transferible

# try:

#     transferir(1000,300)
# except ValueError as e:
#     print(f'Erro: {e}')


# üìå Ejercicio 1 (Nivel b√°sico)
# Tienes un programa que pide la edad de una persona. Si la edad ingresada es un n√∫mero negativo, debe lanzarse un error con un mensaje que diga:
# ‚ùå "La edad no puede ser negativa."

# ‚úÖ Objetivo:

# Usar raise para detectar este error.

# Usar try-except para manejar el error y evitar que el programa se cierre.

# def edad_de_usuario(edad):

#     if edad <= 0:
#         raise ValueError ('‚ùå La edad no puede ser negativa.')
#     return f'{edad} es correcta'

# try:
#     edad_usuario = int(input('Ingrese su edad: '))
#     print(edad_de_usuario(edad_usuario))
# except ValueError as e:
#     print(f'Error: {e}')

# üîπ Enunciado:
# Imagina que est√°s programando un sistema bancario. Debes escribir una funci√≥n que verifique si un usuario puede realizar un retiro de dinero. Si el monto a retirar es mayor que el saldo disponible, la funci√≥n debe lanzar una excepci√≥n con un mensaje adecuado. Luego, maneja el error para que el programa no se detenga abruptamente.

# üìå Preguntas para ayudarte a pensar:

# ¬øQu√© tipo de excepci√≥n podr√≠as usar aqu√≠?

# ¬øD√≥nde colocar√≠as raise?

# ¬øC√≥mo manejar√≠as el error con try-except?

# ¬°Dale! Escr√≠belo y dime c√≥mo te sale. üí™üî•


# def usuario_retiro(monto_retirar,Saldo_cuenta):
#     if monto_retirar > Saldo_cuenta:
#         raise ValueError ('Saldo insuficiente')
#     return f'Usted retiro {monto} S/.'


# while True:
#     try:
#         monto = int(input('Ingrese el monto a retirar: '))
#         print(usuario_retiro(monto,1000))
#         break
#     except ValueError:
#         print('‚ùå Error: Debe ingresar un n√∫mero v√°lido."')

# print('El programa sigue')



# Ejercicio: Validaci√≥n de Correo Electr√≥nico
# Un usuario debe ingresar su correo electr√≥nico, pero queremos asegurarnos de que sea v√°lido.

# üìå Reglas:

# Debe contener un @.

# Debe tener un dominio v√°lido (.com, .net, .org, etc.).

# No puede estar vac√≠o.

# Si el correo no cumple estas condiciones, lanzaremos una excepci√≥n personalizada con raise.

# üí° Objetivo:

# Usar raise para generar un error si el correo es inv√°lido.

def validar_correo(correo):
    # Verificar que el correo contenga '@' y que termine con un dominio v√°lido
    if '@' not in correo or not correo.endswith(('.com', '.net', '.org')):
        raise ValueError('‚ùå Correo no v√°lido. Debe contener "@" y terminar en ".com", ".net" o ".org"')
    return '‚úÖ Correo v√°lido'

# Probando
try:
    while True:
        try:
            email = input('Ingrese su correo: ')
        
            # Verificar que el correo no sea solo n√∫meros
            if email.isdigit():
                raise ValueError("‚ùå El correo no puede ser solo n√∫meros.")
        
            # Verificar que el correo no sea solo letras
            if email.isalpha():
                raise ValueError("‚ùå El correo no puede ser solo letras.")
        
            print(validar_correo(email))
            break
        except ValueError as e:
            print(f'Error: {e}')
except KeyboardInterrupt:
    print('\n‚ùå Programa interrumpido por el usuario')

