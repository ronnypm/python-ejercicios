# üå± Introducci√≥n amigable
# Las expresiones regulares (regex) son una forma de buscar patrones en texto, como si le dieras a Python una lupa inteligente.

# En vez de buscar una palabra exacta, puedes decirle cosas como:

# ‚ÄúEncuentra cualquier n√∫mero‚Äù
# ‚ÄúBusca letras que est√©n al principio de una l√≠nea‚Äù
# ‚ÄúDetecta si un texto termina con .com‚Äù
# Y eso lo logras con clases de caracteres y aserciones, que son como los superpoderes del buscador de texto.


import re

patron = r'\d+' #con el signo mas si hay un numero con dos digitos no los separa[57] pero si no lo ponemos separa los numeros por separado [5,7]
texto = 'Hay 3 gatos y 57 perros.'
concidencia = re.findall(patron,texto)
# print(concidencia) #['3', '57']
# \D (may√∫scula) es lo opuesto: cualquier cosa que no sea un d√≠gito.

#--------------------------------------------------------------------------------------
#  \w ‚Äî Car√°cter de palabra (letras, n√∫meros y _)

patron = r'\w'
texto = 'Hola_123!'
concidencia = re.findall(patron,texto)
#print(concidencia) # ['H', 'o', 'l', 'a', '_', '1', '2', '3']

#tambien se puede hacer asi 
re.findall(r'\w', 'Hola_123!')  # ['H', 'o', 'l', 'a', '_', '1', '2', '3']

#--------------------------------------------------------------------------------------

# \s ‚Äî Espacio en blanco (espacio, tab, salto de l√≠nea)

patron = r'\s' #busca todo que sea ' ', '\t', '\n' con la ese mayuscula /S todo lo contrario tod lo que no sea ' ', '\t', '\n'
texto = 'Hola mundo\t2025'
concidencia = re.findall(patron,texto)
#print(concidencia)# [' ', '\t']

#Tambien se puede hacer asi 

re.findall(r'\s', 'Hola mundo\t2025')  # [' ', '\t']



#--------------------------------------------------------------------------------------


re.findall(r'[aeiou]', 'Python es divertido')  # ['o', 'e', 'u', 'i', 'o']



#--------------------------------------------------------------------------------------


#busca todas las letras de a a la z en minusculas, de esta forma se agregan tambien a las letra mayusculas [A-Za-z]
re.findall(r'[a-z]', 'Hola123')  # ['o', 'l', 'a'])


#--------------------------------------------------------------------------------------

# Negaci√≥n: [^...] (todo excepto),  El ^ dentro de [] niega la clase.

negacion = re.findall(r'[^0-9]', 'Casa 45') 
#print(negacion)#['C', 'a', 's', 'a', ' ']



#--------------------------------------------------------------------------------------

# üß® Aserciones: no consumen texto, solo lo verifican
# Las aserciones te permiten decir cosas como:

# "Solo si est√° al inicio"
# "Solo si est√° antes de algo"
# "Solo si est√° seguido por algo"
# 1. ^ ‚Äî Inicio de l√≠nea

# ^ ‚Äî Inicio de l√≠nea
resultado = re.findall(r'^Hola','Hola mundo') #inicio de cadena de texto
# print(resultado)#['Hola']

#$ ‚Äî Fin de l√≠nea
resultado = re.findall(r'mundo$','Hola mundo') #finla de cadena de texto
# print(resultado)#['mundo']

# \b ‚Äî L√≠mite de palabras
#üöß √ötil para evitar falsos positivos como "Holanda".
limite_palabra = re.findall(r'\bHola\b', 'Hola mundo y Holanda')  # ['Hola']
# print(limite_palabra)


#(?=...) ‚Äî Lookahead positivo: lo que viene despu√©s

lookahead = re.findall(r'\d(?=‚Ç¨)', '5‚Ç¨, 10‚Ç¨, 20$')  # ['5', '0']
# print(lookahead)

#(?!...) ‚Äî Lookahead negativo: lo que no viene despu√©s

Lookahead_negativo = re.findall(r'\d(?!‚Ç¨)', '5‚Ç¨, 10‚Ç¨, 20$')  # ['1', '2', '0']
print(Lookahead_negativo)


#  (?<=...) y (?<!...) ‚Äî Lookbehind positivo/negativo

# (?<=\$) ‚Üí solo busca si antes hay un s√≠mbolo $
# \d+ ‚Üí uno o m√°s d√≠gitos
uno = re.findall(r'(?<=\$)\d+', 'Total: $45')  # ['45']
dos = re.findall(r'(?<!\$)\d+', 'Total: $45 y 30')  # ['30']
# (?<!\$) ‚Üí lookbehind negativo: busca d√≠gitos que NO est√°n precedidos por $


print(uno)
print(dos)